Authors
Paolo Davini (CNR-ISAC, Apr 2024)
Alessandro Sozza (CNR-ISAC, Apr 2024)
"""

import argparse
import os
import xarray as xr


mesh_file = 'mesh_mask.nc'
#domain_file = 'ORCA_R2_zps_domcfg.nc'
domain_file = 'domain_cfg.nc'

#default_sette_dir = '/perm/itas/nemo/sette/ORCA2_ICE_v4.2.0'
#default_mesh_dir = '/perm/itas/nemo/ORCA2'
#default_tgt_dir = '/lus/h2resw01/hpcperm/ccpd/ECE4-DATA/nemo'
default_sette_dir = '/lus/h2resw01/hpcperm/ccpd/ecearth4/revisions/main/sources/nemo-4.2/cfgs/ECEARTH/EXP00'
default_mesh_dir = '/lus/h2resw01/hpcperm/ccpd/ecearth4/revisions/main/sources/nemo-4.2/cfgs/ECEARTH/EXP00'
default_tgt_dir = '/lus/h2resw01/hpcperm/ccpd/ECE4-DATA/nemo/domain/PALEORCA2'

def domain_cfg(sette_dir, mesh_dir, tgt_dir):
    """
    Create a domain configuration file for ORCA2 model.

    Parameters:
    - sette_dir (str): Directory path containing the ORCA_R2_zps_domcfg.nc file.
    - mesh_dir (str): Directory path containing the mesh_mask.nc file.
    - tgt_dir (str): Directory path where the domain_cfg.nc file will be saved.

    Returns:
    None
    """

    # load the xarray files
    mesh = xr.open_dataset(f'{mesh_dir}/{mesh_file}')
    domain = xr.open_dataset(f'{sette_dir}/{domain_file}')

    # rename and reset the vertical dimension
    mesh = mesh.rename_dims({'nav_lev': 'z'})
    mesh = mesh.reset_index('nav_lev').reset_coords('nav_lev')

    # select and merge
    levels = domain[['bottom_level', 'top_level']]
    if 't' in levels.dims:
        levels = levels.rename_dims({'t': 'time_counter'})
    merged = xr.merge([mesh, levels])

    # drop some variables
    merged = merged.drop_vars(['tmaskutil', 'umaskutil', 'vmaskutil', 'tmask',
                               'umask', 'vmask', 'fmask', 'mbathy', 'misf',
                               'gdept_0', 'gdepw_0', 'gdept_1d', 'gdepw_1d'])

    # set the fill values
    encoding_var = {var: {'_FillValue': None} for var in merged.data_vars}
    encoding_coord = {var: {'_FillValue': None} for var in merged.coords}
    encoding = {**encoding_var, **encoding_coord}

    # write the file
    os.makedirs(tgt_dir, exist_ok=True)
    merged.to_netcdf(f'{tgt_dir}/domain_cfg.nc', encoding=encoding, unlimited_dims=['time_counter'])

def maskutil(mesh_dir, tgt_dir):
    """
    Extracts mask variables from a mesh dataset and saves them to a new netCDF file.

    Parameters:
    - mesh_dir (str): The directory path where the mesh dataset is located.
    - tgt_dir (str): The directory path where the new netCDF file will be saved.

    Returns:
    None
    """
    mesh = xr.open_dataset(f'{mesh_dir}/mesh_mask.nc')
    masks = mesh[['tmaskutil','umaskutil','vmaskutil']]
    masks = masks.rename_dims({'time_counter': 't'}).drop_vars('time_counter')
    masks.attrs = {'Conventions': "CF-1.1"}
    os.makedirs(tgt_dir, exist_ok=True)
    masks.to_netcdf(f'{tgt_dir}/maskutil.nc', unlimited_dims=['t'])


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='A tool to modify domain_cfg ORCA2 file')



    parser.add_argument('--sette_dir', type=str, default=default_sette_dir, 
                        help='Path to SETTE domain directory')
    parser.add_argument('--mesh_dir', type=str, default=default_mesh_dir, 
                        help='Path to mesh directory')
    parser.add_argument('--tgt_dir', type=str, default=default_tgt_dir, 
                        help='Path to target directory')

    args = parser.parse_args()

    domain_cfg(args.sette_dir, args.mesh_dir, args.tgt_dir)
    maskutil(args.mesh_dir, args.tgt_dir)
